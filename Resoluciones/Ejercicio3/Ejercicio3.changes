

----STARTUP---- (18 October 2021 20:59:00) as /home/thiago/Documentos/Thiago/Algoritmos y Programacion III/Ejercicios-Algo3-2021/Ejercicios-algo3-2021/Resoluciones/Ejercicio3/Ejercicio3.image!


TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #NumeroTest category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 20:59:39'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!NumeroTest methodsFor: 'tests' stamp: 'LL 9/13/2020 15:15:40'!
                              test01isZeroReturnsTrueWhenAskToZero

	self assert: zero isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'LL 9/13/2020 15:15:53'!
                             test02isZeroReturnsFalseWhenAskToOthersButZero

	self deny: one isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:09:55'!
                       test03isOneReturnsTrueWhenAskToOne

	self assert: one isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:10:04'!
  test04isOneReturnsFalseWhenAskToOtherThanOne

	self deny: zero isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:10:14'!
                         test05EnteroAddsWithEnteroCorrectly

	self assert: one + one equals: two! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:10:25'!
                     test06EnteroMultipliesWithEnteroCorrectly

	self assert: two * two equals: four! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:15:37'!
              test07FraccionAddsWithFraccionCorrectly
"
    La suma de fracciones es:
	 
	a/b + c/d = (a.d + c.b) / (b.d)
	 
	SI ESTAN PENSANDO EN LA REDUCCION DE FRACCIONES NO SE PREOCUPEN!!
	TODAVIA NO SE ESTA TESTEANDO ESE CASO
"
	| sevenTenths |

	sevenTenths := Numero with: (Numero with: 7) over: (Numero with: 10).

	self assert: oneFifth + oneHalf equals: sevenTenths! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:11:26'!
                    test08FraccionMultipliesWithFraccionCorrectly
"
    La multiplicacion de fracciones es:
	 
	(a/b) * (c/d) = (a.c) / (b.d)
"

	self assert: oneFifth * twoFifth equals: twoTwentyfifth! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:16:19'!
        test09AparentFraccionesAreEqual

	self assert: oneHalf equals: (Numero with: two over: four)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:12:46'!
 test10AddingFraccionesCanReturnAnEntero

	self assert: oneHalf + oneHalf equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:26:23'!
         test11MultiplyingFraccionesCanReturnAnEntero

	self assert: (twoFifth) * (fiveHalfs) equals: one! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:13:21'!
                             test12AFraccionCanNotBeZero

	self deny: oneHalf isZero! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:13:30'!
      test13AFraccionCanNotBeOne

	self deny: oneHalf isOne! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:14:16'!
        test14NegationOfEnteroIsCorrect

	self assert: two negated equals: negativeTwo.! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:44:24'!
              test15NegationOfFraccionIsCorrect

	self assert: oneHalf negated equals: (Numero with: negativeOne over: two)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:29:45'!
                test16SignIsCorrectlyAssignedToFractionWithTwoNegatives

	self assert: oneHalf equals: (Numero with: negativeOne over: negativeTwo)! !
!NumeroTest methodsFor: 'tests' stamp: 'NR 9/8/2019 21:30:07'!
                          test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor

	self assert: oneHalf negated equals: (Numero with: one over: negativeTwo)! !
!NumeroTest methodsFor: 'setup' stamp: 'NR 9/8/2019 21:09:34' overrides: 16927572!
   setUp

	zero := Numero with: 0.
	one := Numero with: 1.
	two := Numero with: 2.
	three:= Numero with: 3.
	four := Numero with: 4.
	five := Numero with: 5.
	eight := Numero with: 8.
	negativeOne := Numero with: -1.
	negativeTwo := Numero with: -2.
	
	oneHalf := Numero with: one over: two.
	oneFifth := Numero with: one over: five.
	twoFifth := Numero with: two over: five.
	twoTwentyfifth := Numero with: two over: (Numero with: 25).
	fiveHalfs := Numero with: five over: two.
	! !

Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Numero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 20:59:39'!
Object subclass: #Numero
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Numero methodsFor: 'arithmetic operations' stamp: 'LL 9/13/2020 16:33:53'!
                              * aMultiplier 

	type = #Entero ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	type = #Fraccion ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'arithmetic operations' stamp: 'LL 9/13/2020 16:35:06'!
                      + anAdder 
	
	type = #Entero ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	type = #Fraccion ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'arithmetic operations' stamp: 'LL 9/13/2020 16:35:23'!
                       negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
		
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'testing' stamp: 'NR 9/8/2019 22:00:09'!
               isNegative
	
	type = #Entero ifTrue:
		[ ^value < 0 ].
	type = #Fraccion ifTrue:
		[ ^denominator < 0 ].! !
!Numero methodsFor: 'testing' stamp: 'NR 9/8/2019 22:00:16'!
                       isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'testing' stamp: 'NR 9/8/2019 22:00:23'!
       isZero

	type = #Entero ifTrue:
		[ ^value = 0 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'initialization' stamp: 'NR 9/8/2019 20:40:14'!
                               initializeWith: aValue
	
	type := #Entero.
	value := aValue! !
!Numero methodsFor: 'initialization' stamp: 'NR 9/8/2019 20:40:23'!
                             initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !
!Numero methodsFor: 'accessing' stamp: 'NR 9/8/2019 20:59:46'!
             denominator

	^denominator! !
!Numero methodsFor: 'accessing' stamp: 'NR 9/8/2019 20:33:53'!
   integerValue

	"Usamos integerValue en vez de value para que no haya problemas con el mensaje value implementado en Object - Hernan"
	
	^value! !
!Numero methodsFor: 'accessing' stamp: 'NR 9/8/2019 20:59:52'!
               numerator

	^numerator! !
!Numero methodsFor: 'accessing' stamp: 'NR 9/8/2019 21:55:04'!
       type
	
	^type! !
!Numero methodsFor: 'printing' stamp: 'NR 9/8/2019 21:59:58' overrides: 50683280!
                             printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Numero methodsFor: 'comparing' stamp: 'LL 9/15/2020 11:00:17' overrides: 16881029!
                           = anObject

	((anObject isKindOf: self class) and: [ type = anObject type ]) ifTrue: [
		type = #Entero ifTrue: [ ^value = anObject integerValue ].
		type = #Fraccion ifTrue: [ ^(numerator * anObject denominator) = (denominator * anObject numerator) ].
		^false
	].

	^false
! !
!Numero methodsFor: 'comparing' stamp: 'NR 9/8/2019 22:00:49' overrides: 16881052!
                      hash
	type = #Entero ifTrue:
		[ ^value hash ].
	type = #Fraccion ifTrue:
		[ ^(numerator hash / denominator hash) hash ].! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'NR 9/9/2019 16:21:07'!
             // aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'arithmetic operations - private' stamp: 'LL 9/13/2020 16:50:25'!
                          greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[ ^self class with: (value gcd: anEntero integerValue) ].
		
	self error: 'Tipo de número no soportado'! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

Numero class
	instanceVariableNames: ''!

!classDefinition: 'Numero class' category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 20:59:40'!
Numero class
	instanceVariableNames: ''!
!Numero class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 5/7/2016 22:45'!
      canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero'! !
!Numero class methodsFor: 'instance creation' stamp: 'NR 9/8/2019 20:46:40'!
           with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'NR 9/8/2019 23:20:40'!
                          with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !

----End fileIn of /home/thiago/Documentos/Thiago/Algoritmos y Programacion III/Ejercicios-Algo3-2021/Ejercicios-algo3-2021/Resoluciones/Ejercicio3/Numeros-Parte1-Ejercicio.st----!

Object subclass: #xxxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Object subclass: #XXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #XXXX category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 21:01:27'!
Object subclass: #XXXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

XXXX subclass: #AAAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #AAAA category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 21:02:11'!
XXXX subclass: #AAAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

XXXX subclass: #BBBB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #BBBB category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 21:02:16'!
XXXX subclass: #BBBB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!AAAA methodsFor: 'nil' stamp: 'tg 10/18/2021 21:03:59'!
        mmmm: value
	 ^value = 0.! !
!BBBB methodsFor: 'no messages' stamp: 'tg 10/18/2021 21:04:34'!
  mmmm: value
	^false! !
!XXXX methodsFor: 'nil' stamp: 'tg 10/18/2021 21:05:31'!
                mmmm
	self subclassResponsibility.! !

XXXX subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Fraccion category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 21:06:49'!
XXXX subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #Fraccion stamp: 'tg 10/18/2021 21:07:18'!
XXXX subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!AAAA methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:07:38'!
                       isZero: value
	 ^value = 0.! !

!methodRemoval: AAAA #mmmm: stamp: 'tg 10/18/2021 21:09:10'!
mmmm: value
	 ^value = 0.!
!BBBB methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:09:44'!
                               isZero: value
	^false! !

!methodRemoval: BBBB #mmmm: stamp: 'tg 10/18/2021 21:09:44'!
mmmm: value
	^false!
!XXXX methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:10:06'!
           mmmm: value
	self subclassResponsibility.! !

!methodRemoval: XXXX #mmmm stamp: 'tg 10/18/2021 21:10:10'!
mmmm
	self subclassResponsibility.!
!XXXX methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:10:26'!
         isZero: value
	self subclassResponsibility.! !

!methodRemoval: XXXX #mmmm: stamp: 'tg 10/18/2021 21:10:26'!
mmmm: value
	self subclassResponsibility.!
!XXXX methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:12:02'!
                               mmmm: value
	self subclassResponsibility.! !
!AAAA methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:12:02' overrides: 50332086!
                      mmmm: value
	 ^value = 0.! !
!BBBB methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:12:02' overrides: 50332086!
      mmmm: value
	^false! !

!methodRemoval: XXXX #isZero: stamp: 'tg 10/18/2021 21:12:02'!
isZero: value
	self subclassResponsibility.!

!methodRemoval: AAAA #isZero: stamp: 'tg 10/18/2021 21:12:02'!
isZero: value
	 ^value = 0.!

!methodRemoval: BBBB #isZero: stamp: 'tg 10/18/2021 21:12:02'!
isZero: value
	^false!
!BBBB methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:12:56'!
                               isZero: value
	^false! !
!XXXX methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:12:56'!
                              isZero: value
	self subclassResponsibility.! !
!AAAA methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:12:56' overrides: 50332112!
                    isZero: value
	 ^value = 0.! !

!methodRemoval: BBBB #mmmm: stamp: 'tg 10/18/2021 21:12:56'!
mmmm: value
	^false!

!methodRemoval: XXXX #mmmm: stamp: 'tg 10/18/2021 21:12:56'!
mmmm: value
	self subclassResponsibility.!

!methodRemoval: AAAA #mmmm: stamp: 'tg 10/18/2021 21:12:56'!
mmmm: value
	 ^value = 0.!

XXXX subclass: #AAAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #AAAA category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 21:13:27'!
XXXX subclass: #AAAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRenamed: #AAAA as: #Entero stamp: 'tg 10/18/2021 21:13:34'!
Smalltalk renameClassNamed: #AAAA as: #Entero!
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331820!
                     + anAdder 
	
	type = #Entero ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	type = #Fraccion ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331919 overrides: 16881052!
                    hash
	type = #Entero ifTrue:
		[ ^value hash ].
	type = #Fraccion ifTrue:
		[ ^(numerator hash / denominator hash) hash ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331898 overrides: 50683280!
                   printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331850!
                    isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331861!
         initializeWith: aValue
	
	type := #Entero.
	value := aValue! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331926!
      // aDivisor 
	
	type = #Entero ifTrue:
		[ ^self class with: value // aDivisor integerValue ].
		
	self error: 'Tipo de número no soportado'! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331844!
                     isNegative
	
	type = #Entero ifTrue:
		[ ^value < 0 ].
	type = #Fraccion ifTrue:
		[ ^denominator < 0 ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331907 overrides: 16881029!
     = anObject

	((anObject isKindOf: self class) and: [ type = anObject type ]) ifTrue: [
		type = #Entero ifTrue: [ ^value = anObject integerValue ].
		type = #Fraccion ifTrue: [ ^(numerator * anObject denominator) = (denominator * anObject numerator) ].
		^false
	].

	^false
! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331855!
              isZero

	type = #Entero ifTrue:
		[ ^value = 0 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331836!
        negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
		
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331808!
                 * aMultiplier 

	type = #Entero ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	type = #Fraccion ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:35' prior: 50331934!
       greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[ ^self class with: (value gcd: anEntero integerValue) ].
		
	self error: 'Tipo de número no soportado'! !

!classRenamed: #BBBB as: #Fraccion stamp: 'tg 10/18/2021 21:13:58'!
Smalltalk renameClassNamed: #BBBB as: #Fraccion!
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:58' prior: 50332198!
   isNegative
	
	type = #Entero ifTrue:
		[ ^value < 0 ].
	type = #Fraccion ifTrue:
		[ ^denominator < 0 ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:58' prior: 50332232!
                         * aMultiplier 

	type = #Entero ifTrue:	
		[ ^self class with: value * aMultiplier integerValue ].
		
	type = #Fraccion ifTrue:
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:58' prior: 50332217!
       isZero

	type = #Entero ifTrue:
		[ ^value = 0 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:58' prior: 50332179!
        isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:58' prior: 50332145!
         + anAdder 
	
	type = #Entero ifTrue:
		[ ^self class with: value + anAdder integerValue ].
	
	type = #Fraccion ifTrue:
		[ | newNumerator newDenominator |
		
		newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
		newDenominator := denominator * anAdder denominator.
		
		^ self class with: newNumerator over: newDenominator ].
	
	self error: 'Tipo de número no soportado'
	! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:58' prior: 50332162 overrides: 16881052!
                    hash
	type = #Entero ifTrue:
		[ ^value hash ].
	type = #Fraccion ifTrue:
		[ ^(numerator hash / denominator hash) hash ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:58' prior: 50332205 overrides: 16881029!
                   = anObject

	((anObject isKindOf: self class) and: [ type = anObject type ]) ifTrue: [
		type = #Entero ifTrue: [ ^value = anObject integerValue ].
		type = #Fraccion ifTrue: [ ^(numerator * anObject denominator) = (denominator * anObject numerator) ].
		^false
	].

	^false
! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:58' prior: 50332223!
              negated
	
	type = #Entero ifTrue:
		[ ^self * (self class with: -1) ].
		
	type = #Fraccion ifTrue:
		[ ^self class with: numerator * (self class with: -1) over: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:58' prior: 50332170 overrides: 50683280!
                             printOn: aStream
	
	type = #Entero ifTrue:
		[ aStream print: value ].
	
	type = #Fraccion ifTrue:
		[ aStream 
			print: numerator;
			nextPut: $/;
			print: denominator ].! !
!Numero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:13:59' prior: 50331866!
                    initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !

!classRenamed: #XXXX as: #TipoDeNumero stamp: 'tg 10/18/2021 21:14:52'!
Smalltalk renameClassNamed: #XXXX as: #TipoDeNumero!
!Numero methodsFor: 'testing' stamp: 'tg 10/18/2021 21:16:17' prior: 50332275!
                               isZero

	type isZero.! !
!Numero methodsFor: 'testing' stamp: 'tg 10/18/2021 21:16:51' prior: 50332363!
                        isZero

	type isZero: value.! !
!Numero methodsFor: 'testing' stamp: 'tg 10/18/2021 21:17:53' prior: 50332367!
                 isZero

	^type isZero: value.! !
!TipoDeNumero methodsFor: 'nil' stamp: 'tg 10/18/2021 21:18:53'!
                              isOne: value
	self subclassResponsibility.! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:19:48' overrides: 50332375!
                 isOne: value
	^false! !
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:20:21' overrides: 50332375!
         isOne: value
	 ^value = 1.! !
!TipoDeNumero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:23:52'!
                 isNegative: value
	self subclassResponsibility.! !
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:24:15' overrides: 50332388!
              isNegative: value
	 ^value > 0.! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:24:28' overrides: 50332388!
                            isNegative: value
	 ^value > 0.! !
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:25:09' prior: 50332393 overrides: 50332388!
              isNegative: value
	 ^value < 0.! !

!methodRemoval: Entero #isNegative: stamp: 'tg 10/18/2021 21:25:21'!
isNegative: value
	 ^value < 0.!

!methodRemoval: Fraccion #isNegative: stamp: 'tg 10/18/2021 21:25:25'!
isNegative: value
	 ^value > 0.!
!TipoDeNumero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:25:40' prior: 50332388!
            isNegative: value
	^ value < 0.! !

Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #XXX category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 21:29:53'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

XXX subclass: #AAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #AAA category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 21:30:17'!
XXX subclass: #AAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

XXX subclass: #BBB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #BBB category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 21:30:21'!
XXX subclass: #BBB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!AAA methodsFor: 'nil' stamp: 'tg 10/18/2021 21:32:02'!
                mmm
	"^self  * (self class with: -1)."! !
!AAA methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:35:07' prior: 50332451!
                              mmm
	"^self  * (self class with: -1)."! !
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:47:51' prior: 50332117 overrides: 50332112!
       isZero: value
	 ^value = 0.! !
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/18/2021 21:53:15'!
                      initializeWith: aValue
	"type := #Entero.
	value := aValue."! !

TipoDeNumero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Object subclass: #TipoDeNumero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/18/2021 21:53:51'!
Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

----QUIT----(18 October 2021 21:57:08) Ejercicio3.image priorSource: 325!

----STARTUP---- (20 October 2021 22:47:44) as /home/thiago/Documentos/Thiago/Algoritmos y Programacion III/Ejercicios-Algo3-2021/Ejercicios-algo3-2021/Resoluciones/Ejercicio3/Ejercicio3.image!

!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:01:28' prior: 50332465!
       initializeWith: aValue
	"type := #Entero.
	value := aValue."! !

Object subclass: #TipoDeNumero
	instanceVariableNames: 'type value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Object subclass: #TipoDeNumero
	instanceVariableNames: 'type valued'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/20/2021 23:02:29'!
Object subclass: #TipoDeNumero
	instanceVariableNames: 'type valued'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:02:46' prior: 50332500!
               initializeWith: aValue
	type := #Entero.
	valued := aValue.! !

Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/20/2021 23:03:02'!
Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:03:12' prior: 50332523!
initializeWith: aValue
"	type := #Entero.
	valued := aValue."! !

Object subclass: #TipoDeNumero
	instanceVariableNames: 'aValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Object subclass: #TipoDeNumero
	instanceVariableNames: 'valued'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/20/2021 23:07:23'!
Object subclass: #TipoDeNumero
	instanceVariableNames: 'valued'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:07:39'!
            isZero
	 ^valued = 0.! !

Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/20/2021 23:08:24'!
Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!methodRemoval: Entero #isZero stamp: 'tg 10/20/2021 23:08:32'!
isZero
	 ^valued = 0.!

!methodRemoval: Entero #isOne: stamp: 'tg 10/20/2021 23:12:01'!
isOne: value
	 ^value = 1.!

!methodRemoval: Entero #initializeWith: stamp: 'tg 10/20/2021 23:12:06'!
initializeWith: aValue
"	type := #Entero.
	valued := aValue."!
!Numero methodsFor: 'testing' stamp: 'NR 9/8/2019 22:00:23' prior: 50332371!
                      isZero

	type = #Entero ifTrue:
		[ ^value = 0 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !

!methodRemoval: Fraccion #isOne: stamp: 'tg 10/20/2021 23:14:21'!
isOne: value
	^false!
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:15:50' prior: 50332588!
                           isZero

	type isZero.
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:16:43'!
isZero: aValue

	type isZero: aValue.
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:17:07' prior: 50332597!
isZero

	type isZero: value.! !

!methodRemoval: Numero #isZero: stamp: 'tg 10/20/2021 23:17:13'!
isZero: aValue

	type isZero: aValue.
	type = #Fraccion ifTrue:
		[ ^false ].!
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:22:06' prior: 50332185!
                         initializeWith: aValue
	
	type := Entero..
	value := aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:22:12' prior: 50332615!
           initializeWith: aValue
	
	type := Entero.
	value := aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:23:54' prior: 50332620!
            initializeWith: aValue
	
	type := Entero.
	value := aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:25:27' prior: 50331955!
   with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:26:08' prior: 50332625!
                 initializeWith: aValue
	
	type := Entero new.
	value := aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:26:12' prior: 50332641!
        initializeWith: aValue
	
	type := Entero new.
	value := aValue.! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:26:38' prior: 50332343!
       initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:= Fraccion new.
	numerator := aNumerator.
	denominator := aDenominator ! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:27:48' prior: 50332606!
                         isZero

	^type isZero: value.! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:30:06' prior: 50332256!
                isNegative
	
	type = #Entero ifTrue:
		[ ^value < 0 ].
	type = #Fraccion ifTrue:
		[ ^denominator < 0 ].! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:33:20' prior: 50332281!
     isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !

TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/20/2021 23:35:22'!
TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/20/2021 23:36:27'!
TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:36:52' prior: 50332646!
                          initializeWith: aValue
	
	type := #Entero.
	value := aValue.! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:37:04' prior: 50332651!
          initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:= #Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !

!classRemoval: #Entero stamp: 'tg 10/20/2021 23:37:22'!
TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #Fraccion stamp: 'tg 10/20/2021 23:37:22'!
TipoDeNumero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #TipoDeNumero stamp: 'tg 10/20/2021 23:37:22'!
Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!methodRemoval: AAA #mmm stamp: 'tg 10/20/2021 23:37:36'!
mmm
	"^self  * (self class with: -1)."!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/20/2021 23:38:07'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Fraccion category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/20/2021 23:38:18'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Entero methodsFor: 'nil' stamp: 'tg 10/20/2021 23:38:43' overrides: 50332667!
         isZero
! !
!Fraccion methodsFor: 'nil' stamp: 'tg 10/20/2021 23:38:54' overrides: 50332667!
    isZero
! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:39:39' prior: 50332667!
      isZero

	self subclassResponsibility.! !
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:39:54' prior: 50332782 overrides: 50332788!
        isZero
	^value = 0.
! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:40:08' prior: 50332785 overrides: 50332788!
                       isZero
	^false.! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:41:15' prior: 50332630!
              with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:41:27' prior: 50331966!
      with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^Fraccion new initializeWith: numerator over: denominator! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:41:45' prior: 50332813!
                             with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:42:01' prior: 50332802!
 with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  Entero error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:42:12' prior: 50332856!
    with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [ self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:42:58' prior: 50332716!
                  initializeWith: aValue
	
	type := #Entero.
	value := aValue.
	^Entero new.! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:43:25' prior: 50332721!
                            initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:= #Fraccion.
	numerator := aNumerator.
	denominator := aDenominator.
	^Fraccion new.! !
!Entero class methodsFor: 'nil' stamp: 'tg 10/20/2021 23:46:26'!
                          initializeWith: aValue
	
	"type := #Entero.
	value := aValue."! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:46:34' prior: 50332867!
                               with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [ self error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !
!Entero class methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:47:07' prior: 50332900!
     initializeWith: aValue
	
	"type := Entero.
	value := aValue."! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:47:15' prior: 50332906!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [ self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Entero class methodsFor: 'as yet unclassified' stamp: 'tg 10/21/2021 00:03:53' prior: 50332917!
       initializeWith: aValue
	
	"type := #Entero.
	value := aValue."! !
!Entero methodsFor: 'nil' stamp: 'tg 10/21/2021 00:04:12' overrides: 50332878!
               initializeWith: aValue
	
	type := #Entero.
	value := aValue.
	^Entero new.! !
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/21/2021 00:04:18' prior: 50332938 overrides: 50332878!
   initializeWith: aValue
	
	type := #Entero.
	value := aValue.! !
!Fraccion methodsFor: 'nil' stamp: 'tg 10/21/2021 00:04:50' overrides: 50332884!
               initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:= #Fraccion.
	numerator := aNumerator.
	denominator := aDenominator.
! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/21/2021 00:05:34' prior: 50332884!
                    initializeWith: aNumerator over: aDenominator
	self subclassResponsibility.! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/21/2021 00:05:47' prior: 50332878!
                           initializeWith: aValue
	self subclassResponsibility.! !

Numero subclass: #Entero
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 00:07:25'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #AAA stamp: 'tg 10/21/2021 00:09:37'!
XXX subclass: #AAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #BBB stamp: 'tg 10/21/2021 00:09:37'!
XXX subclass: #BBB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #XXX stamp: 'tg 10/21/2021 00:09:38'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/21/2021 00:10:15' prior: 50332922!
                         with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [ self error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/21/2021 00:10:27' prior: 50332835!
       with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^Fraccion new initializeWith: numerator over: denominator! !

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'tg 10/21/2021 00:10:55'!
PASSED!

!testRun: #NumeroTest #test01isZeroReturnsTrueWhenAskToZero stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test02isZeroReturnsFalseWhenAskToOthersButZero stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'tg 10/21/2021 00:11:04'!
PASSED!

----STARTUP---- (21 October 2021 17:57:21) as /home/thiago/Documentos/Thiago/Algoritmos y Programacion III/Ejercicios-Algo3-2021/Ejercicios-algo3-2021/Resoluciones/Ejercicio3/Ejercicio3.image!

!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:01:28' prior: 50332465!
                              initializeWith: aValue
	"type := #Entero.
	value := aValue."! !

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:37'!
Object subclass: #TipoDeNumero
	instanceVariableNames: 'type valued'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:37'!
Object subclass: #TipoDeNumero
	instanceVariableNames: 'type valued'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:02:46' prior: 50333108!
   initializeWith: aValue
	type := #Entero.
	valued := aValue.! !

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:37'!
Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:37'!
Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:03:12' prior: 50333129!
                          initializeWith: aValue
"	type := #Entero.
	valued := aValue."! !

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:37'!
Object subclass: #TipoDeNumero
	instanceVariableNames: 'valued'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:37'!
Object subclass: #TipoDeNumero
	instanceVariableNames: 'valued'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:07:39'!
                            isZero
	 ^valued = 0.! !

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:37'!
Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #TipoDeNumero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:37'!
Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!methodRemoval: Entero #isZero stamp: 'tg 10/21/2021 17:57:37'!
isZero
	 ^valued = 0.!

!methodRemoval: Entero #isOne: stamp: 'tg 10/21/2021 17:57:37'!
isOne: value
	 ^value = 1.!

!methodRemoval: Entero #initializeWith: stamp: 'tg 10/21/2021 17:57:37'!
initializeWith: aValue
"	type := #Entero.
	valued := aValue."!
!Numero methodsFor: 'testing' stamp: 'NR 9/8/2019 22:00:23' prior: 50332371!
                isZero

	type = #Entero ifTrue:
		[ ^value = 0 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !

!methodRemoval: Fraccion #isOne: stamp: 'tg 10/21/2021 17:57:37'!
isOne: value
	^false!
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:15:50' prior: 50333200!
                           isZero

	type isZero.
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:16:43'!
isZero: aValue

	type isZero: aValue.
	type = #Fraccion ifTrue:
		[ ^false ].! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:17:07' prior: 50333209!
isZero

	type isZero: value.! !

!methodRemoval: Numero #isZero: stamp: 'tg 10/21/2021 17:57:37'!
isZero: aValue

	type isZero: aValue.
	type = #Fraccion ifTrue:
		[ ^false ].!
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:22:06' prior: 50332185!
                         initializeWith: aValue
	
	type := Entero..
	value := aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:22:12' prior: 50333227!
           initializeWith: aValue
	
	type := Entero.
	value := aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:23:54' prior: 50333232!
            initializeWith: aValue
	
	type := Entero.
	value := aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:25:27' prior: 50331955!
   with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:26:08' prior: 50333237!
                 initializeWith: aValue
	
	type := Entero new.
	value := aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:26:12' prior: 50333253!
        initializeWith: aValue
	
	type := Entero new.
	value := aValue.! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:26:38' prior: 50332343!
       initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:= Fraccion new.
	numerator := aNumerator.
	denominator := aDenominator ! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:27:48' prior: 50333218!
                         isZero

	^type isZero: value.! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:30:06' prior: 50332256!
                isNegative
	
	type = #Entero ifTrue:
		[ ^value < 0 ].
	type = #Fraccion ifTrue:
		[ ^denominator < 0 ].! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:33:20' prior: 50332281!
     isOne

	type = #Entero ifTrue:
		[ ^value = 1 ].
	type = #Fraccion ifTrue:
		[ ^false ].! !

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:38'!
TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:38'!
TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:38'!
TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:38'!
TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:36:52' prior: 50333258!
              initializeWith: aValue
	
	type := #Entero.
	value := aValue.! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:37:04' prior: 50333263!
          initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:= #Fraccion.
	numerator := aNumerator.
	denominator := aDenominator ! !

!classRemoval: #Entero stamp: 'tg 10/21/2021 17:57:38'!
TipoDeNumero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #Fraccion stamp: 'tg 10/21/2021 17:57:38'!
TipoDeNumero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #TipoDeNumero stamp: 'tg 10/21/2021 17:57:39'!
Object subclass: #TipoDeNumero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!methodRemoval: AAA #mmm stamp: 'tg 10/21/2021 17:57:39'!
mmm
	"^self  * (self class with: -1)."!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:39'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:39'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Fraccion category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:39'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Fraccion category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:39'!
Numero subclass: #Fraccion
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Entero methodsFor: 'nil' stamp: 'tg 10/20/2021 23:38:43' overrides: 50333279!
       isZero
! !
!Fraccion methodsFor: 'nil' stamp: 'tg 10/20/2021 23:38:54' overrides: 50333279!
    isZero
! !
!Numero methodsFor: 'testing' stamp: 'tg 10/20/2021 23:39:39' prior: 50333279!
      isZero

	self subclassResponsibility.! !
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:39:54' prior: 50333397 overrides: 50333403!
        isZero
	^value = 0.
! !
!Fraccion methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:40:08' prior: 50333400 overrides: 50333403!
                       isZero
	^false.! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:41:15' prior: 50333242!
              with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:41:27' prior: 50331966!
      with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^Fraccion new initializeWith: numerator over: denominator! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:41:45' prior: 50333428!
                             with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:42:01' prior: 50333417!
 with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  Entero error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:42:12' prior: 50333471!
    with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [ self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:42:58' prior: 50333325!
                  initializeWith: aValue
	
	type := #Entero.
	value := aValue.
	^Entero new.! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/20/2021 23:43:25' prior: 50333330!
                            initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:= #Fraccion.
	numerator := aNumerator.
	denominator := aDenominator.
	^Fraccion new.! !
!Entero class methodsFor: 'nil' stamp: 'tg 10/20/2021 23:46:26'!
                          initializeWith: aValue
	
	"type := #Entero.
	value := aValue."! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:46:34' prior: 50333482!
                               with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [ self error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !
!Entero class methodsFor: 'as yet unclassified' stamp: 'tg 10/20/2021 23:47:07' prior: 50333515!
     initializeWith: aValue
	
	"type := Entero.
	value := aValue."! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/20/2021 23:47:15' prior: 50333521!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [ self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Entero class methodsFor: 'as yet unclassified' stamp: 'tg 10/21/2021 00:03:53' prior: 50333532!
       initializeWith: aValue
	
	"type := #Entero.
	value := aValue."! !
!Entero methodsFor: 'nil' stamp: 'tg 10/21/2021 00:04:12' overrides: 50333493!
               initializeWith: aValue
	
	type := #Entero.
	value := aValue.
	^Entero new.! !
!Entero methodsFor: 'as yet unclassified' stamp: 'tg 10/21/2021 00:04:18' prior: 50333553 overrides: 50333493!
   initializeWith: aValue
	
	type := #Entero.
	value := aValue.! !
!Fraccion methodsFor: 'nil' stamp: 'tg 10/21/2021 00:04:50' overrides: 50333499!
               initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:= #Fraccion.
	numerator := aNumerator.
	denominator := aDenominator.
! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/21/2021 00:05:34' prior: 50333499!
                    initializeWith: aNumerator over: aDenominator
	self subclassResponsibility.! !
!Numero methodsFor: 'initialization' stamp: 'tg 10/21/2021 00:05:47' prior: 50333493!
                           initializeWith: aValue
	self subclassResponsibility.! !

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:39'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classDefinition: #Entero category: 'Numeros-Parte1-Ejercicio' stamp: 'tg 10/21/2021 17:57:39'!
Numero subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #AAA stamp: 'tg 10/21/2021 17:57:40'!
XXX subclass: #AAA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #BBB stamp: 'tg 10/21/2021 17:57:40'!
XXX subclass: #BBB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!

!classRemoval: #XXX stamp: 'tg 10/21/2021 17:57:40'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numeros-Parte1-Ejercicio'!
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/21/2021 00:10:15' prior: 50333537!
       with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [ self error: 'aValue debe ser anInteger' ].
	
	^Entero new initializeWith: aValue! !
!Numero class methodsFor: 'instance creation' stamp: 'tg 10/21/2021 00:10:27' prior: 50333450!
       with: aDividend over: aDivisor

	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^Fraccion new initializeWith: numerator over: denominator! !

----QUIT----(21 October 2021 18:14:45) Ejercicio3.image priorSource: 26895!