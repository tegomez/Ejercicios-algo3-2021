

----STARTUP---- (8 October 2021 14:22:50) as /home/thiago/Documentos/Thiago/Algoritmos y Programacion III/Ejercicios-Algo3-2021/Ejercicios-algo3-2021/Resoluciones/Ejercicio2/Ejercicio2.image!


----End fileIn of /home/thiago/Documentos/Thiago/Algoritmos y Programacion III/Ejercicios-Algo3-2021/Ejercicios-algo3-2021/Ejercicios/02-CodigoRepetido/CodigoRepetido-Ejercicio.st----!
!CustomerBookTest methodsFor: 'nil' stamp: 'Tg 10/8/2021 14:25:44'!
testsSinCodigoRepetido
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 14:27:40' prior: 50331939!
testsSinCodigoRepetido
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 14:47:16'!
testsSinCodigoRepetido: anAction inMilliseconds: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value: customerBook.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 14:52:31' prior: 50331960!
testsSinCodigoRepetido: anAction inMilliseconds: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	(anAction asMessageWith: 'John Lennon') sendTo: customerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 14:56:22'!
testDoAnAction: anAction shouldNotTakeMoreThan: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	(anAction asMessageWith: 'John Lennon') sendTo: customerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 14:57:41'!
testModifiedCustomerBookWith: anAction shouldNotTakeMoreThan: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	(anAction asMessageWith: 'John Lennon') sendTo: customerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 14:58:40' prior: 50332014!
testModifiedCustomerBookWith: anAction shouldNotTakeMoreThan: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	(anAction asMessageWith: 'John Lennon') sendTo: customerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !

!methodRemoval: CustomerBookTest #testsSinCodigoRepetido:inMilliseconds: stamp: 'Tg 10/8/2021 15:03:41'!
testsSinCodigoRepetido: anAction inMilliseconds: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	(anAction asMessageWith: 'John Lennon') sendTo: customerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)!

!methodRemoval: CustomerBookTest #testDoAnAction:shouldNotTakeMoreThan: stamp: 'Tg 10/8/2021 15:04:00'!
testDoAnAction: anAction shouldNotTakeMoreThan: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	(anAction asMessageWith: 'John Lennon') sendTo: customerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)!

!methodRemoval: CustomerBookTest #testsSinCodigoRepetido stamp: 'Tg 10/8/2021 15:04:05'!
testsSinCodigoRepetido
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	customerBook addCustomerNamed: 'John Lennon'.
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (50 * millisecond)!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'Tg 10/8/2021 15:04:39'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'Tg 10/8/2021 15:04:39'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'Tg 10/8/2021 15:04:39'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'Tg 10/8/2021 15:04:39'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'Tg 10/8/2021 15:04:39'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'Tg 10/8/2021 15:04:39'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'Tg 10/8/2021 15:04:39'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'Tg 10/8/2021 15:04:39'!
PASSED!
!CustomerBookTest methodsFor: 'nil' stamp: 'Tg 10/8/2021 15:05:29'!
test
! !

!methodRemoval: CustomerBookTest #test stamp: 'Tg 10/8/2021 15:06:12'!
test
!
!CustomerBookTest methodsFor: 'testPruebas' stamp: 'Tg 10/8/2021 15:07:50'!
test01Pruebas
	! !
!CustomerBookTest methodsFor: 'testPruebas' stamp: 'Tg 10/8/2021 15:08:40' prior: 50332139!
test01Pruebas! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:12:23' prior: 50332143!
test01Pruebas
	self testModifiedCustomerBookWith: [: customerBook | customerBook addCustomerNamed: 'John Lennon']  shouldNotTakeMoreThan: 50.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:12:38' prior: 50332147!
test01Pruebas
	self testModifiedCustomerBookWith: [: customerBook | customerBook addCustomerNamed: 'John Lennon']  shouldNotTakeMoreThan: 50.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:13:23' prior: 50332033!
testModifiedCustomerBookWith: anAction shouldNotTakeMoreThan: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction asMessage sendTo: customerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !

!testRun: #CustomerBookTest #test01Pruebas stamp: 'Tg 10/8/2021 15:13:48'!
ERROR!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'Tg 10/8/2021 15:13:48'!
ERROR!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:16:31' prior: 50332163!
testModifiedCustomerBookWith: anAction shouldNotTakeMoreThan: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value: customerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !

!testRun: #CustomerBookTest #test01Pruebas stamp: 'Tg 10/8/2021 15:16:38'!
PASSED!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:17:54'!
test02Pruebas
	self testModifiedCustomerBookWith: [: customerBook | customerBook removeCustomerNamed: 'John Lennon']  shouldNotTakeMoreThan: 100.! !

!testRun: #CustomerBookTest #test02Pruebas stamp: 'Tg 10/8/2021 15:18:24'!
ERROR!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'Tg 10/8/2021 15:18:24'!
ERROR!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:19:20' prior: 50332207!
test02Pruebas
	self testModifiedCustomerBookWith: [: customerBook | customerBook removeCustomerNamed: '']  shouldNotTakeMoreThan: 100.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:19:46' prior: 50332221!
test02Pruebas
	self testModifiedCustomerBookWith: [: customerBook | customerBook removeCustomerNamed: 'Paul McCartney']  shouldNotTakeMoreThan: 100.! !

!testRun: #CustomerBookTest #test02Pruebas stamp: 'Tg 10/8/2021 15:19:49'!
ERROR!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'Tg 10/8/2021 15:19:49'!
ERROR!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:26:01'!
testModified: aCustomerBook With: anAction shouldNotTakeMoreThan: milliseconds
|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value: aCustomerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:26:41' prior: 50332155!
test01Pruebas
	self testModifiedCustomerBookWith: [: customerBook | customerBook addCustomerNamed: 'John Lennon']  shouldNotTakeMoreThan: 50.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:28:21' prior: 50332259!
test01Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self testModified: aCustomerBook With: [: customerBook | customerBook addCustomerNamed: 'John Lennon']  shouldNotTakeMoreThan: 50.! !

!testRun: #CustomerBookTest #test01Pruebas stamp: 'Tg 10/8/2021 15:28:33'!
PASSED!

!methodRemoval: CustomerBookTest #testModifiedCustomerBookWith:shouldNotTakeMoreThan: stamp: 'Tg 10/8/2021 15:28:54'!
testModifiedCustomerBookWith: anAction shouldNotTakeMoreThan: milliseconds
| customerBook millisecondsBeforeRunning millisecondsAfterRunning |
	customerBook := CustomerBook new.
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value: customerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:29:44' prior: 50332229!
test02Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self testModified: aCustomerBook With: [: customerBook | customerBook addCustomerNamed: '']  shouldNotTakeMoreThan: 100.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:30:10' prior: 50332298!
test02Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self testModified: aCustomerBook With: [: customerBook | customerBook addCustomerNamed: 'Paul McCartney']  shouldNotTakeMoreThan: 100.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:30:52' prior: 50332308!
test02Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: 'Paul McCartney'.
	self testModified: aCustomerBook With: [: customerBook | customerBook removeCustomerNamed: 'Paul McCartney']  shouldNotTakeMoreThan: 100.! !

!testRun: #CustomerBookTest #test02Pruebas stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'Tg 10/8/2021 15:31:14'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'Tg 10/8/2021 15:31:23'!
PASSED!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:36:45'!
test03Pruebas
	! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:36:48'!
test04Pruebas
	! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:36:58'!
test0304
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:38:47' prior: 50332378!
test0304
		
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:48:41'!
test0506
		
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:48:55' prior: 50332397!
test0506	
	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:53:44' prior: 50332413!
test0506
	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 15:56:01' prior: 50332382!
test0304
		
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'Tg 10/8/2021 16:10:05' prior: 50332433!
test0506
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).! !

----QUIT----(8 October 2021 16:10:20) Ejercicio2.image priorSource: 183!

----STARTUP---- (10 October 2021 14:25:42) as /home/tin-gprieto/Documentos/facultad/trabajos_practicos/algo3/repo/Resoluciones/Ejercicio2/Ejercicio2.image!

!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:31:45'!
removeCustomerNamed: aName in: Colaborador
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^ aName 
			] 
	].
	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:32:52' prior: 50331860!
removeCustomerNamed: aName 
 
	self removeCustomerNamed: aName in: active. 
	self removeCustomerNamed: aName in: suspended. 
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:33:03' prior: 50332507!
removeCustomerNamed: aName 
 
	self removeCustomerNamed: aName in: active. 
	self removeCustomerNamed: aName in: suspended.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:33:09' prior: 50332497!
removeCustomerNamed: aName in: Colaborador
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^ aName 
			] 
	].

! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:33:30' prior: 50332523!
removeCustomerNamed: aName in: Colaborador
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^ aName 
			] 
	].
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:33:39' prior: 50332515!
removeCustomerNamed: aName 
 
	self removeCustomerNamed: aName in: active. 
	self removeCustomerNamed: aName in: suspended.
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 14:34:26'!
ERROR!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 14:34:26'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:34:49' prior: 50332543!
removeCustomerNamed: aName 
 
	self removeCustomerNamed: aName in: active. 
	self removeCustomerNamed: aName in: suspended.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:34:54' prior: 50332533!
removeCustomerNamed: aName in: Colaborador
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^ aName 
			] 
	].
	^ NotFound signal.
	
	
! !

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 14:35:02'!
ERROR!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 14:35:02'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/10/2021 14:35:05'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/10/2021 14:35:05'!
ERROR!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 14:35:13'!
ERROR!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 14:35:13'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/10/2021 14:40:47'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/10/2021 14:40:47'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:42:50' prior: 50332556!
removeCustomerNamed: aName 
 
	self removeCustomerNamed: aName in: active. 
	self removeCustomerNamed: aName in: suspended.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:43:54' prior: 50332564!
removeCustomerNamed: aName in: Colaborador
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^ aName 
			] 
	].
	
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:43:58' prior: 50332601!
removeCustomerNamed: aName 
 
	self removeCustomerNamed: aName in: active. 
	self removeCustomerNamed: aName in: suspended.
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:44:11' prior: 50332619!
removeCustomerNamed: aName 
 
	self removeCustomerNamed: aName in: active. 
	self removeCustomerNamed: aName in: suspended.
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:46:35' prior: 50332627!
removeCustomerNamed: aName 
	self removeCustomerNamed: aName in: active. 
	self removeCustomerNamed: aName in: suspended.
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:46:54' prior: 50332609!
removeCustomerNamed: aName in: Colaborador
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^true .
			] 
	].
	^false.
	
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:46:55' prior: 50332643!
removeCustomerNamed: aName in: Colaborador
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^true.
			] 
	].
	^false.
	
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:48:07' prior: 50332635!
removeCustomerNamed: aName 
	self removeCustomerNamed: aName in: active.
	self removeCustomerNamed: aName in: suspended.
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:48:15' prior: 50332653!
removeCustomerNamed: aName in: Colaborador
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^aName.
			] 
	].
	
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:49:38' prior: 50332663!
removeCustomerNamed: aName 
	[self removeCustomerNamed: aName in: active.] on: aName do:[^aName].
	[self removeCustomerNamed: aName in: suspended.]on: aName do:[^aName].
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/10/2021 14:49:42'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/10/2021 14:49:42'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 14:51:01' prior: 50332681!
removeCustomerNamed: aName 
	[self removeCustomerNamed: aName in: active.] on: aName do: [^aName].
	[self removeCustomerNamed: aName in: suspended.]on: aName do:[^aName].
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:00:41' prior: 50332699!
removeCustomerNamed: aName 
	self removeCustomerNamed: aName in: active.
	self removeCustomerNamed: aName in: suspended.
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:00:53'!
removeCustomerNamed: aName in: Colaborador con: Closure
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^aName.
			] 
	].
	
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:01:07' prior: 50332717!
removeCustomerNamed: aName in: Colaborador con: Closure
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^Closure value: aName.
			] 
	].
	
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:01:49' prior: 50332709!
removeCustomerNamed: aName 
	self removeCustomerNamed: aName in: active con: [:a | ^a].
	self removeCustomerNamed: aName in: suspended con: [:a | ^a].
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 15:01:56'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/10/2021 15:01:59'!
PASSED!
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:02:42' prior: 50332738!
removeCustomerNamed: aName 
	self removeCustomerNamed: aName in: active con: [^aName].
	self removeCustomerNamed: aName in: suspended con: [^aName].
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:02:48' prior: 50332727!
removeCustomerNamed: aName in: Colaborador con: Closure
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^Closure.
			] 
	].
	
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:03:03'!
removeCustomerNamed: aName in: Colaborador return: Closure
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^Closure.
			] 
	].
	
	
! !

!methodRemoval: CustomerBook #removeCustomerNamed:in:con: stamp: 'MG 10/10/2021 15:03:12'!
removeCustomerNamed: aName in: Colaborador con: Closure
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^Closure.
			] 
	].
	
	
!
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:03:27' prior: 50332754!
removeCustomerNamed: aName 
	self removeCustomerNamed: aName in: active return: [^aName].
	self removeCustomerNamed: aName in: suspended return: [^aName].
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:05:37' prior: 50332793!
removeCustomerNamed: aName 
	self removeCustomerNamed: aName in: active return: [^aName].
	self removeCustomerNamed: aName in: suspended return: [^aName].
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:07:00' prior: 50332802!
removeCustomerNamed: aName 
	self removeCustomerNamed: aName in: active return: [^aName].
	self removeCustomerNamed: aName in: suspended return: [^aName].
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:08:59' prior: 50332811!
removeCustomerNamed: aName 
	self removeCustomerNamed: aName in: active return: [^aName].
	self removeCustomerNamed: aName in: suspended return: [^aName].
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'testing' stamp: 'MG 10/10/2021 15:09:31'!
includesCustomerNamed: aName in: Colaborador

	^(active includes: aName) or: [ suspended includes: aName ]! !
!CustomerBook methodsFor: 'testing' stamp: 'MG 10/10/2021 15:09:46' prior: 50332828!
includesCustomerNamed: aName in: Colaborador

	^Colaborador includes: aName! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:12:10' prior: 50332820!
removeCustomerNamed: aName
	(self includesCustomerNamed: aName in: active) ifTrue:[ 
		^self removeCustomerNamed: aName in: active return: [^aName].
	].
	(self includesCustomerNamed: aName in: suspended) ifTrue:[
		^self removeCustomerNamed: aName in: suspended return: [^aName].	
	].
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:12:17' prior: 50332841!
removeCustomerNamed: aName
	(self includesCustomerNamed: aName in: active) ifTrue:[ 
		^self removeCustomerNamed: aName in: active.
	].
	(self includesCustomerNamed: aName in: suspended) ifTrue:[
		^self removeCustomerNamed: aName in: suspended.	
	].
	^ NotFound signal.
! !

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/10/2021 15:12:23'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 15:12:26'!
PASSED!

!methodRemoval: CustomerBook #removeCustomerNamed:in:return: stamp: 'MG 10/10/2021 15:12:41'!
removeCustomerNamed: aName in: Colaborador return: Closure
 
	1 to: Colaborador size do: 
	[ :index |
		aName = (Colaborador at: index)
			ifTrue: [
				Colaborador removeAt: index.
				^Closure.
			] 
	].
	
	
!
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:15:05'!
getSizeof: Colaborador
	
	^suspended size! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:15:12' prior: 50332882!
getSizeof: Colaborador
	
	^Colaborador size! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:15:32' prior: 50331880!
numberOfActiveCustomers
	
	^self getSizeof: active.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:15:40' prior: 50331888!
numberOfSuspendedCustomers
	
	^self getSizeof: suspended.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:15:55' prior: 50331884!
numberOfCustomers
	
	^self getSizeof: [active , suspended ].! !

!methodRemoval: CustomerBook #getSizeof: stamp: 'MG 10/10/2021 15:18:51'!
getSizeof: Colaborador
	
	^Colaborador size!
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:19:10' prior: 50332902!
numberOfCustomers
	
	^active size + suspended size.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:19:23' prior: 50332897!
numberOfSuspendedCustomers
	
	^suspended size.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:19:32' prior: 50332892!
numberOfActiveCustomers
	
	^active size.! !

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 15:19:37'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'MG 10/10/2021 15:19:40'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/10/2021 15:19:44'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/10/2021 15:19:45'!
PASSED!
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:26:34'!
getSizeOf: aCollaborator
	
	^suspended size.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:26:55' prior: 50332940!
getSizeOf: aCollaborator
	
	^aCollaborator size.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:28:02' prior: 50332945!
getSizeOf: aCustomerState
	
	^aCustomerState size.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:28:20' prior: 50332921!
numberOfActiveCustomers
	
	^self getSizeOf: active.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:28:32' prior: 50332916!
numberOfSuspendedCustomers
	
	^self getSizeOf: suspended.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:28:43' prior: 50332911!
numberOfCustomers
	
	^self getSizeOf:active size + suspended size.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 15:29:05' prior: 50332965!
numberOfCustomers
	
	^self getSizeOf: (active add: suspended).! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/10/2021 15:29:14'!
PASSED!

!methodRemoval: CustomerBookTest #test0304 stamp: 'MG 10/10/2021 15:32:45'!
test0304
		
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]!

!methodRemoval: CustomerBookTest #test03Pruebas stamp: 'MG 10/10/2021 15:32:45'!
test03Pruebas
	!

!methodRemoval: CustomerBookTest #test04Pruebas stamp: 'MG 10/10/2021 15:32:48'!
test04Pruebas
	!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:33:10' prior: 50332242!
testModified: aCustomerBook With: anAction shouldNotTakeMoreThan: milliseconds
	
	|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value: aCustomerBook. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 15:35:42' prior: 50332671!
removeCustomerNamed: aName in: Colaborador
 
	1 to: Colaborador size do: 
	[ :index | 
		aName = (Colaborador at: index) 
			ifTrue: [
				Colaborador removeAt: index.
				^aName.
			] 
	].
	
	
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:36:47'!
test0708 ! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:39:39'!
test0708: estaSuspendido
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:40:29' prior: 50333030!
test0708: estaSuspendido
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	estaSuspendido ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:41:39'!
testRemoveif: estaSuspendido
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	estaSuspendido ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:42:30'!
testSuspendif: isSuspended
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	isSuspended ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:42:47' prior: 50333084!
testSuspendif: isSuspended
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	isSuspended ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!methodRemoval: CustomerBookTest #testRemoveif: stamp: 'MG 10/10/2021 15:42:53'!
testRemoveif: estaSuspendido
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	estaSuspendido ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:42:59'!
testSuspendIf: isSuspended
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	isSuspended ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!methodRemoval: CustomerBookTest #testSuspendif: stamp: 'MG 10/10/2021 15:43:04'!
testSuspendif: isSuspended
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	isSuspended ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:44:58'!
testCanNotSuspendIf: isSuspended
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	isSuspended ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!methodRemoval: CustomerBookTest #testSuspendIf: stamp: 'MG 10/10/2021 15:45:03'!
testSuspendIf: isSuspended
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	isSuspended ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/10/2021 15:46:46' prior: 50331813!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	
	[	customerBook suspendCustomerNamed: johnLennon. 
		customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/10/2021 15:48:00' prior: 50333207!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	 
	[customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!methodRemoval: CustomerBookTest #testCanNotSuspendIf: stamp: 'MG 10/10/2021 15:48:13'!
testCanNotSuspendIf: isSuspended
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	isSuspended ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:48:34' prior: 50333048!
test0708: estaSuspendido
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	estaSuspendido ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!methodRemoval: CustomerBookTest #test0708: stamp: 'MG 10/10/2021 15:48:36'!
test0708: estaSuspendido
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	estaSuspendido ifTrue: [
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:49:03' prior: 50333026!
test0708 
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:49:34' prior: 50333297!
test0708 
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:53:27'!
test0708: aName xx: isValid
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:54:07' prior: 50333328!
test0708: aName xx: isValid
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	
	isValid ifTrue:[
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	].

	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:54:16' prior: 50333344!
test0708: aName xx: isValid
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	
	isValid ifTrue:[
	johnLennon := aName.
	customerBook addCustomerNamed: johnLennon.
	].

	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:54:47'!
test0708: aName 
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:55:50' prior: 50333377!
test0708: aName 
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(aName = johnLennon) ifTrue:[
	
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:56:19' prior: 50333393!
test0708: aName
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(aName = johnLennon) ifTrue:[
		
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:56:31' prior: 50333410!
test0708: aName
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(aName = johnLennon) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:57:42'!
test07Pruebas
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:58:13' prior: 50333445!
test07Pruebas
	self test0708: 'Ringo Starr'! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 15:58:43'!
test08Pruebas
	self test0708: 'John Lennon'! !

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/10/2021 15:58:50'!
FAILURE!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/10/2021 15:58:50'!
FAILURE!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/10/2021 15:59:22'!
FAILURE!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/10/2021 15:59:22'!
FAILURE!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/10/2021 15:59:25'!
FAILURE!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/10/2021 15:59:35'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/10/2021 15:59:40'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/10/2021 15:59:44'!
FAILURE!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/10/2021 15:59:44'!
FAILURE!
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 16:00:21' prior: 50332970!
numberOfCustomers
	
	^active size + suspended size.! !

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/10/2021 16:00:26'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/10/2021 16:00:28'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'MG 10/10/2021 16:00:30'!
PASSED!
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 16:00:45' prior: 50332960!
numberOfSuspendedCustomers
	
	^suspended size.! !
!CustomerBook methodsFor: 'accessing' stamp: 'MG 10/10/2021 16:00:52' prior: 50332955!
numberOfActiveCustomers
	
	^active size.! !

!methodRemoval: CustomerBook #getSizeOf: stamp: 'MG 10/10/2021 16:00:54'!
getSizeOf: aCustomerState
	
	^aCustomerState size.!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/10/2021 16:01:46'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/10/2021 16:01:48'!
PASSED!

!methodRemoval: CustomerBookTest #test0708:xx: stamp: 'MG 10/10/2021 16:02:08'!
test0708: aName xx: isValid
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	
	isValid ifTrue:[
	johnLennon := aName.
	customerBook addCustomerNamed: johnLennon.
	].

	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:06:49' prior: 50333427!
test0708: includes
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:09:22'!
test0708: aCustomerName xx: includes
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	].
	[ customerBook suspendCustomerNamed: aCustomerName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:12:00' prior: 50333570!
test0708: aCustomerName xx: includes
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := aCustomerName.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/10/2021 16:14:47' prior: 50333466!
test08Pruebas
	self test0708: true! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/10/2021 16:15:10' prior: 50333461!
test07Pruebas
	self test0708: false xx: 'Ringo Starr' ! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:15:23' prior: 50333590!
test0708: includes xx: aCustomerName
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := aCustomerName.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:16:21'!
testCanNotSuspend: includes xx: aCustomerName
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := aCustomerName.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:17:50'!
testCanNotSuspendIfisValid: includes Customer: aCustomerName
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := aCustomerName.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/10/2021 16:18:34' prior: 50333614!
test07Pruebas
	self testCanNotSuspendIfisValid: false Customer: 'Ringo Starr' ! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/10/2021 16:18:37' prior: 50333681!
test07Pruebas
	self testCanNotSuspendIfisValid: false Customer: 'Ringo Starr'.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/10/2021 16:19:49' prior: 50333610!
test08Pruebas
	self testCanNotSuspendIfisValid:  true Customer: '....'! !

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/10/2021 16:19:53'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/10/2021 16:19:55'!
PASSED!

!methodRemoval: CustomerBookTest #test0708: stamp: 'MG 10/10/2021 16:20:44'!
test0708: includes
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!

!methodRemoval: CustomerBookTest #test0708:xx: stamp: 'MG 10/10/2021 16:20:46'!
test0708: includes xx: aCustomerName
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := aCustomerName.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!

!methodRemoval: CustomerBookTest #testCanNotSuspend:xx: stamp: 'MG 10/10/2021 16:20:53'!
testCanNotSuspend: includes xx: aCustomerName
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := aCustomerName.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/10/2021 16:21:37' prior: 50333225!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	 
	[customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:21:56'!
test0708: aName
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:24:53' prior: 50333779!
test0708: aName
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/10/2021 16:37:11' prior: 50333687!
test07Pruebas
	self test0708: 'Ringo Starr'.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/10/2021 16:37:28' prior: 50333693!
test08Pruebas
	self test0708: 'John Lennon'! !

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/10/2021 16:37:40'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/10/2021 16:37:42'!
PASSED!
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/10/2021 16:41:30' prior: 50331776!
test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self deny: (customerBook includesCustomerNamed: paulMcCartney).


	
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:42:01' prior: 50332469!
test0506
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !

!testRun: #CustomerBookTest #test0506 stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test0506 stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test0708 stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/10/2021 16:42:09'!
PASSED!

!testRun: #CustomerBookTest #test0506 stamp: 'MG 10/10/2021 16:42:12'!
PASSED!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:44:32' prior: 50333849!
test0506
""
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:44:55' prior: 50333921!
test0506
"RemovingASuspendedCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:45:50' prior: 50333942!
test0506
"SuspendingACustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:46:04' prior: 50333965!
test0506
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:49:33' prior: 50333988!
test0506
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:53:08' prior: 50334011!
test0506
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney array|
	array := #(0,0,0).
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:53:33' prior: 50334034!
test0506
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney array|
	array := #(0,0,0).
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: (array at: 0) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 1) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 2) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !

!testRun: #CustomerBookTest #test0506 stamp: 'MG 10/10/2021 16:53:36'!
ERROR!

!testRun: #CustomerBookTest #test0506 stamp: 'MG 10/10/2021 16:53:36'!
ERROR!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/10/2021 16:54:13' prior: 50334058!
test0506
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBook methodsFor: 'testing' stamp: 'MG 10/10/2021 17:05:00' prior: 50332835!
includesCustomerNamed: aName in: aCustomerState

	^aCustomerState includes: aName! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/10/2021 17:05:31' prior: 50333017!
removeCustomerNamed: aName in: aCustomerState
 
	1 to: aCustomerState size do: 
	[ :index | 
		aName = (aCustomerState at: index) 
			ifTrue: [
				aCustomerState removeAt: index.
				^aName.
			] 
	].
	
	
! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/10/2021 17:06:30'!
test05Pruebas! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/10/2021 17:06:33'!
test06Pruebas! !

!methodRemoval: CustomerBookTest #test0708 stamp: 'MG 10/10/2021 17:06:41'!
test0708 
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!

----QUIT----(10 October 2021 17:07:17) Ejercicio2.image priorSource: 26828!

----STARTUP---- (11 October 2021 16:16:19) as /home/thiago/Documentos/Thiago/Algoritmos y Programacion III/Ejercicios-Algo3-2021/Ejercicios-algo3-2021/Resoluciones/Ejercicio2/Ejercicio2.image!


!testRun: #CustomerBookTest #test07Pruebas stamp: 'tg 10/11/2021 16:19:16'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'tg 10/11/2021 16:19:19'!
PASSED!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:20:45' prior: 50333660!
testCanNotSuspendIfisValid: includes Customer: aCustomerName
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(includes) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := aCustomerName.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:21:09' prior: 50334161!
testCanNotSuspendIfisValid: isValid Customer: aCustomerName
	| customerBook johnLennon aName|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	(isValid) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := aCustomerName.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 16:21:59' prior: 50333812!
test07Pruebas
	"self test0708: 'Ringo Starr'."
	self testCanNotSuspendIfisValid: false Customer: 'Ringo Starr'. ! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:22:43' prior: 50334182!
testCanNotSuspendIfisValid: isValid Customer: aCustomerName
	| customerBook johnLennon aName ringoStarr|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	ringoStarr  := 'Ringo Starr'.
	customerBook addCustomerNamed: johnLennon.
	(isValid) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := aCustomerName.
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:23:06' prior: 50334210!
testCanNotSuspendIfisValid: isValid Customer: aCustomerName
	| customerBook johnLennon aName ringoStarr|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	ringoStarr  := 'Ringo Starr'.
	customerBook addCustomerNamed: johnLennon.
	(isValid) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := ringoStarr .
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:23:33'!
testCanNotSuspendIfisValid: isValid
	| customerBook johnLennon aName ringoStarr|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	ringoStarr  := 'Ringo Starr'.
	customerBook addCustomerNamed: johnLennon.
	(isValid) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := ringoStarr .
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

!methodRemoval: CustomerBookTest #testCanNotSuspendIfisValid:Customer: stamp: 'tg 10/11/2021 16:23:40'!
testCanNotSuspendIfisValid: isValid Customer: aCustomerName
	| customerBook johnLennon aName ringoStarr|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	ringoStarr  := 'Ringo Starr'.
	customerBook addCustomerNamed: johnLennon.
	(isValid) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := ringoStarr .
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 16:23:50' prior: 50334203!
test07Pruebas
	"self test0708: 'Ringo Starr'."
	self testCanNotSuspendIfisValid: false. ! !

!testRun: #CustomerBookTest #test07Pruebas stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test0506 stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'tg 10/11/2021 16:23:59'!
PASSED!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'tg 10/11/2021 16:24:03'!
PASSED!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 16:24:34' prior: 50333817!
test08Pruebas
	"self test0708: 'John Lennon'".
	self testCanNotSuspendIfisValid: true. ! !

!testRun: #CustomerBookTest #test08Pruebas stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test0506 stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'tg 10/11/2021 16:24:36'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'tg 10/11/2021 16:24:40'!
PASSED!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:26:40' prior: 50334255!
testCanNotSuspendIfisValid: isValid

	| customerBook johnLennon aName ringoStarr|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	ringoStarr  := 'Ringo Starr'.
	customerBook addCustomerNamed: johnLennon.
	(isValid) ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	] ifFalse: [
		aName := ringoStarr .
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'tests' stamp: 'tg 10/11/2021 16:28:22' prior: 50331757!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.
	

	
! !
!CustomerBookTest methodsFor: 'tests' stamp: 'tg 10/11/2021 16:28:25' prior: 50334439!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

array := #(1 2 3).
!

array at: 2.!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:47:29'!
test0506: block xxx: array
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:50:47' prior: 50334480!
test0506: block xxx: array
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook.
		
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:55:33'!
xxx: number xx: block
	self assert: number equals: block value.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 16:58:01' prior: 50334503!
test0506: block xxx: array
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:01:54' prior: 50334531!
test0506: block xxx: array
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook value: paulMcCartney .
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:01:56' prior: 50334554!
test0506: block xxx: array
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook value: paulMcCartney.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:02:04' prior: 50334577!
test0506: block xxx: array
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook value: paulMcCartney.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:02:27' prior: 50334600!
test0506: block xxx: array
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook value: paulMcCartney.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:02:51' prior: 50334126!
test05Pruebas
	self ! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:05:40' prior: 50334639!
test05Pruebas
	self test0506: [: customerBook : customerName | customerBook suspendCustomerNamed: customerName] xxx: #(0 0 0).
! !

!testRun: #CustomerBookTest #test05Pruebas stamp: 'tg 10/11/2021 17:05:44'!
FAILURE!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'tg 10/11/2021 17:05:44'!
FAILURE!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:06:14' prior: 50334643!
test05Pruebas
	self test0506: [: customerBook : customerName | customerBook suspendCustomerNamed: customerName] xxx: #(0 1 1).
! !

!testRun: #CustomerBookTest #test05Pruebas stamp: 'tg 10/11/2021 17:06:18'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'tg 10/11/2021 17:06:23'!
PASSED!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:06:43' prior: 50334129!
test06Pruebas
	self test0506: [: customerBook : customerName | customerBook suspendCustomerNamed: customerName] xxx: #(0 0 0).! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:08:34' prior: 50334670!
test06Pruebas
	self test0506:
	[: customerBook : customerName |
		 customerBook suspendCustomerNamed: customerName. 
		customerBook removeCustomerNamed: customerName] xxx: #(0 0 0).
	! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:08:39' prior: 50334677!
test06Pruebas
	self test0506:
	[: customerBook : customerName |
		customerBook suspendCustomerNamed: customerName. 
		customerBook removeCustomerNamed: customerName] xxx: #(0 0 0).
	! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:08:58' prior: 50334620!
test0506: block xxx: array
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook value: paulMcCartney.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.! !

!testRun: #CustomerBookTest #test06Pruebas stamp: 'tg 10/11/2021 17:09:05'!
PASSED!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:09:16' prior: 50334696!
test0506: block xxx: array
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook value: paulMcCartney.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:11:46' prior: 50334719!
test0506: block xxx: array
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook value: paulMcCartney.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).! !

!methodRemoval: CustomerBookTest #xxx:xx: stamp: 'tg 10/11/2021 17:11:52'!
xxx: number xx: block
	self assert: number equals: block value.!

!methodRemoval: CustomerBookTest #test0506 stamp: 'tg 10/11/2021 17:11:58'!
test0506
"RemovingASuspendingCustomerShouldRemoveItFromCustomerBook"
"testCheck: anAction : With: aCondition"
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	customerBook removeCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 0 equals: customerBook numberOfSuspendedCustomers.
	self assert: 0 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney) not.!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:24:20' prior: 50334418!
testCanNotSuspendIfisValid: state

	| customerBook johnLennon aName ringoStarr|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	ringoStarr  := 'Ringo Starr'.
	customerBook addCustomerNamed: johnLennon.
	(state = 'suspended') ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	]. (state = 'invalid') ifTrue: [
		aName := ringoStarr .
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:24:46' prior: 50334298!
test07Pruebas
	"self test0708: 'Ringo Starr'."
	self testCanNotSuspendIfisValid: 'invalid'. ! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:25:09' prior: 50334358!
test08Pruebas
	"self test0708: 'John Lennon'".
	self testCanNotSuspendIfisValid: 'suspended'. ! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:45:08' prior: 50333000!
testModified: aCustomerBook With: anAction shouldNotTakeMoreThan: milliseconds
	
	|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'tg 10/11/2021 17:45:28'!
testModifiedWith: anAction shouldNotTakeMoreThan: milliseconds
	
	|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:47:10' prior: 50332318!
test02Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: 'Paul McCartney'.
	self testModifiedWith: [aCustomerBook removeCustomerNamed: 'Paul McCartney']  shouldNotTakeMoreThan: 100.! !

!testRun: #CustomerBookTest #test02Pruebas stamp: 'tg 10/11/2021 17:47:16'!
PASSED!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:47:38' prior: 50332267!
test01Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self testModified: aCustomerBook With: [ aCustomerBook addCustomerNamed: 'John Lennon']  shouldNotTakeMoreThan: 50.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'tg 10/11/2021 17:47:47' prior: 50334864!
test01Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self testModifiedWith: [ aCustomerBook addCustomerNamed: 'John Lennon']  shouldNotTakeMoreThan: 50.! !

----QUIT----(11 October 2021 17:58:17) Ejercicio2.image priorSource: 79865!

----STARTUP---- (12 October 2021 23:03:46) as /home/tin-gprieto/Documentos/facultad/trabajos_practicos/algo3/repo/Resoluciones/Ejercicio2/Ejercicio2.image!

!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/12/2021 23:25:06'!
CanNotDo: aBlock withThisError: typeOfError 

    |johnLennon customerBook|

    johnLennon := 'John Lennon'.

	[ aBlock value.
	self fail ]
		on: typeOfError
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]! !

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook johnLennon ringoStarr paulMcCartney'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook johnLennon ringoStarr paulMcCartney'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/12/2021 23:27:48' prior: 50331797!
test07CanNotSuspendAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: 'Ringo Starr'.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ' customerBook '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'MG 10/12/2021 23:28:18'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'customerBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'MG 10/12/2021 23:28:40'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'book'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'MG 10/12/2021 23:30:46'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'book'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'book'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'MG 10/12/2021 23:31:00'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'book'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/12/2021 23:32:02' prior: 50331742!
test04CanNotRemoveAnInvalidCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	[ customerBook removeCustomerNamed: 'Paul McCartney'.
	self fail ]
		on: NotFound 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/12/2021 23:35:50'!
canNotDo: aBlock with: aCustomerBook onThisError: typeOfError 

    |johnLennon|

    johnLennon := 'John Lennon'.

	[ aBlock value.
	self fail ]
		on: typeOfError
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = 1.
			self assert: (aCustomerBook includesCustomerNamed: johnLennon) ]! !

!methodRemoval: CustomerBookTest #CanNotDo:withThisError: stamp: 'MG 10/12/2021 23:36:03'!
CanNotDo: aBlock withThisError: typeOfError 

    |johnLennon customerBook|

    johnLennon := 'John Lennon'.

	[ aBlock value.
	self fail ]
		on: typeOfError
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/12/2021 23:39:36'!
test03Pruebas! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/12/2021 23:39:43'!
test04Pruebas! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/12/2021 23:42:29' prior: 50335101!
test04Pruebas
		
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self canNotDo: [ customerBook removeCustomerNamed: 'Paul McCartney'] 
		with: customerBook 
		onThisError: NotFound ! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/12/2021 23:42:40' prior: 50335105!
test04Pruebas
		
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	
	self canNotDo: [ customerBook removeCustomerNamed: 'Paul McCartney'] 
		with: customerBook 
		onThisError: NotFound.! !

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:42:42'!
PASSED!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:42:45'!
PASSED!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:43:03'!
PASSED!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:43:04'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'MG 10/12/2021 23:43:06'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/12/2021 23:43:06'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/12/2021 23:43:06'!
PASSED!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:43:06'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/12/2021 23:43:06'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:06'!
FAILURE!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/12/2021 23:43:06'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/12/2021 23:43:06'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:06'!
FAILURE!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:07'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/12/2021 23:43:07'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:07'!
FAILURE!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:09'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:09'!
FAILURE!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:09'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/12/2021 23:43:09'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:09'!
FAILURE!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:10'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:10'!
FAILURE!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test01Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test02Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:10'!
FAILURE!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/12/2021 23:43:10'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/12/2021 23:43:10'!
FAILURE!

!testRun: #CustomerBookTest #test04Pruebas stamp: 'MG 10/12/2021 23:44:32'!
PASSED!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/12/2021 23:48:28' prior: 50334807!
test07Pruebas
	
	| aCustomerBook johnLennon |
			
	aCustomerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	aCustomerBook addCustomerNamed: johnLennon.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: 'Ringo Starr'.] with: aCustomerBook onThisError: CantSuspend.! !

!testRun: #CustomerBookTest #test07Pruebas stamp: 'MG 10/12/2021 23:48:57'!
PASSED!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/12/2021 23:49:11' prior: 50334813!
test08Pruebas
	| aCustomerBook johnLennon |
			
	aCustomerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	aCustomerBook addCustomerNamed: johnLennon.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: 'Ringo Starr'.] with: aCustomerBook onThisError: CantSuspend.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/12/2021 23:49:22' prior: 50335451!
test08Pruebas
	| aCustomerBook johnLennon |
			
	aCustomerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	aCustomerBook addCustomerNamed: johnLennon.
	aCustomerBook suspendCustomerNamed: johnLennon.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: 'Ringo Starr'.] with: aCustomerBook onThisError: CantSuspend.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/12/2021 23:49:40' prior: 50335463!
test08Pruebas
	| aCustomerBook johnLennon |
			
	aCustomerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	aCustomerBook addCustomerNamed: johnLennon.
	aCustomerBook suspendCustomerNamed: johnLennon.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: johnLennon.] with: aCustomerBook onThisError: CantSuspend.! !

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/12/2021 23:51:28'!
PASSED!

!methodRemoval: CustomerBookTest #test0708: stamp: 'MG 10/12/2021 23:53:53'!
test0708: aName
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!

!methodRemoval: CustomerBookTest #testModified:With:shouldNotTakeMoreThan: stamp: 'MG 10/12/2021 23:54:15'!
testModified: aCustomerBook With: anAction shouldNotTakeMoreThan: milliseconds
	
	|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	anAction value. 
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)!

!methodRemoval: CustomerBookTest #testCanNotSuspendIfisValid: stamp: 'MG 10/12/2021 23:55:28'!
testCanNotSuspendIfisValid: state

	| customerBook johnLennon aName ringoStarr|
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	ringoStarr  := 'Ringo Starr'.
	customerBook addCustomerNamed: johnLennon.
	(state = 'suspended') ifTrue:[
		customerBook suspendCustomerNamed: johnLennon.
		aName := johnLennon.
	]. (state = 'invalid') ifTrue: [
		aName := ringoStarr .
	].
	[ customerBook suspendCustomerNamed: aName.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/12/2021 23:59:40' prior: 50334739!
test0506: block xxx: array
	| customerBook paulMcCartney |
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	block value: customerBook value: paulMcCartney.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).! !

TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'john ringo paul'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'MG 10/13/2021 00:00:25'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: 'john ringo paul'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'MG 10/13/2021 00:01:08'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: 'john ringo paul'
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: 'john'
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: ' john '
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: 'John'
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'MG 10/13/2021 00:03:25'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: 'John'
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: 'John Ringo'
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'MG 10/13/2021 00:03:31'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: 'John Ringo'
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: 'John Ringo Paul'
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!

!classDefinition: #CustomerBookTest category: 'CodigoRepetido-Ejercicio' stamp: 'MG 10/13/2021 00:03:43'!
TestCase subclass: #CustomerBookTest
	instanceVariableNames: ''
	classVariableNames: 'John Paul Ringo'
	poolDictionaries: ''
	category: 'CodigoRepetido-Ejercicio'!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:05:49' prior: 50335436!
test07Pruebas
	
	| aCustomerBook johnLennon |
			
	aCustomerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	aCustomerBook addCustomerNamed: johnLennon.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: 'Ringo Starr'.] with: aCustomerBook onThisError: CantSuspend.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:06:21' prior: 50335477!
test08Pruebas
	| aCustomerBook johnLennon |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	aCustomerBook suspendCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: John.] with: aCustomerBook onThisError: CantSuspend.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:06:33' prior: 50335660!
test08Pruebas
	| aCustomerBook |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	aCustomerBook suspendCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: John.] with: aCustomerBook onThisError: CantSuspend.! !

!testRun: #CustomerBookTest #test08Pruebas stamp: 'MG 10/13/2021 00:06:36'!
PASSED!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:07:01' prior: 50335648!
test07Pruebas
	
	| aCustomerBook |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: 'Ringo Starr'.] with: aCustomerBook onThisError: CantSuspend.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:07:08' prior: 50335686!
test07Pruebas
	
	| aCustomerBook |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: Ringo.] with: aCustomerBook onThisError: CantSuspend.! !
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/13/2021 00:07:57' prior: 50333761!
test08CanNotSuspendAnAlreadySuspendedCustomer
	
	| customerBook johnLennon |
			
	customerBook := CustomerBook new.
	johnLennon := 'John Lennon'.
	customerBook addCustomerNamed: johnLennon.
	customerBook suspendCustomerNamed: johnLennon.
	 
	[customerBook suspendCustomerNamed: johnLennon.
	self fail ]
		on: CantSuspend 
		do: [ :anError | 
			self assert: customerBook numberOfCustomers = 1.
			self assert: (customerBook includesCustomerNamed: johnLennon) ]
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:08:21' prior: 50335547!
test0506: block xxx: array
	| customerBook  |
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: Paul.
	block value: customerBook value: Paul.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: Paul).! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:08:57' prior: 50335073!
canNotDo: aBlock with: aCustomerBook onThisError: typeOfError 

	[ aBlock value.
	self fail ]
		on: typeOfError
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = 1.
			self assert: (aCustomerBook includesCustomerNamed: John) ]! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:09:37' prior: 50335117!
test04Pruebas
		
	| customerBook  |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: John.
	
	self canNotDo: [ customerBook removeCustomerNamed: 'Paul McCartney'] 
		with: customerBook 
		onThisError: NotFound.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:09:43' prior: 50335754!
test04Pruebas
		
	| customerBook  |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: John.
	
	self canNotDo: [ customerBook removeCustomerNamed: Paul] 
		with: customerBook 
		onThisError: NotFound.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:10:05' prior: 50334851!
test02Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: 'Paul McCartney'.
	self testModifiedWith: [aCustomerBook removeCustomerNamed: Paul]  shouldNotTakeMoreThan: 100.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:10:11' prior: 50335775!
test02Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: Paul.
	self testModifiedWith: [aCustomerBook removeCustomerNamed: Paul]  shouldNotTakeMoreThan: 100.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:10:18' prior: 50334873!
test01Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self testModifiedWith: [ aCustomerBook addCustomerNamed: Paul]  shouldNotTakeMoreThan: 50.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:13:24' prior: 50335098!
test03Pruebas
	^ self! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:13:28'!
test03PruebasOK
	^ self! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:13:34' prior: 50335803!
test03Pruebas
	^ self! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:13:36' prior: 50335811!
test03Pruebas! !

!methodRemoval: CustomerBookTest #test03PruebasOK stamp: 'MG 10/13/2021 00:13:43'!
test03PruebasOK
	^ self!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:13:48'!
test01PruebasOK
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self testModifiedWith: [ aCustomerBook addCustomerNamed: Paul]  shouldNotTakeMoreThan: 50.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:13:55'!
test02PruebasOK
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: Paul.
	self testModifiedWith: [aCustomerBook removeCustomerNamed: Paul]  shouldNotTakeMoreThan: 100.! !

!methodRemoval: CustomerBookTest #test02Pruebas stamp: 'MG 10/13/2021 00:14:19'!
test02Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: Paul.
	self testModifiedWith: [aCustomerBook removeCustomerNamed: Paul]  shouldNotTakeMoreThan: 100.!

!methodRemoval: CustomerBookTest #test01Pruebas stamp: 'MG 10/13/2021 00:14:21'!
test01Pruebas
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self testModifiedWith: [ aCustomerBook addCustomerNamed: Paul]  shouldNotTakeMoreThan: 50.!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:14:26'!
test07PruebasOK
	
	| aCustomerBook |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: Ringo.] with: aCustomerBook onThisError: CantSuspend.! !

!methodRemoval: CustomerBookTest #test07Pruebas stamp: 'MG 10/13/2021 00:14:38'!
test07Pruebas
	
	| aCustomerBook |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: Ringo.] with: aCustomerBook onThisError: CantSuspend.!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:14:43'!
test08PruebasOK
	| aCustomerBook |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	aCustomerBook suspendCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: John.] with: aCustomerBook onThisError: CantSuspend.! !

!methodRemoval: CustomerBookTest #test08Pruebas stamp: 'MG 10/13/2021 00:14:45'!
test08Pruebas
	| aCustomerBook |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	aCustomerBook suspendCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: John.] with: aCustomerBook onThisError: CantSuspend.!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:15:17' prior: 50335765!
test04Pruebas
		
	| customerBook  |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: John.
	
	self canNotDo: [ customerBook removeCustomerNamed: Paul] with: customerBook onThisError: NotFound.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:15:58'!
test04PruebasOK
		
	| customerBook  |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: John.
	
	self canNotDo: [ customerBook removeCustomerNamed: Paul] with: customerBook onThisError: NotFound.! !

!methodRemoval: CustomerBookTest #test04Pruebas stamp: 'MG 10/13/2021 00:16:03'!
test04Pruebas
		
	| customerBook  |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: John.
	
	self canNotDo: [ customerBook removeCustomerNamed: Paul] with: customerBook onThisError: NotFound.!
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/13/2021 00:20:17' prior: 50332854!
removeCustomerNamed: aName
	(active includes: aName) ifTrue:[ 
		^self removeCustomerNamed: aName in: active.
	].
	(suspended includes: aName) ifTrue:[
		^self removeCustomerNamed: aName in: suspended.	
	].
	^ NotFound signal.
! !

!methodRemoval: CustomerBook #includesCustomerNamed:in: stamp: 'MG 10/13/2021 00:20:28'!
includesCustomerNamed: aName in: aCustomerState

	^aCustomerState includes: aName!
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/13/2021 00:21:54'!
removeCustomerNamed: aName in: aCustomerState with: aBlock
 
	1 to: aCustomerState size do: 
	[ :index | 
		aName = (aCustomerState at: index) 
			ifTrue: [
				aCustomerState removeAt: index.
				^aName.
			] 
	].
	
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/13/2021 00:22:04' prior: 50335945!
removeCustomerNamed: aName in: aCustomerState with: aBlock
 
	1 to: aCustomerState size do: 
	[ :index | 
		aName = (aCustomerState at: index) 
			ifTrue: [
				aCustomerState removeAt: index.
				^aBlock.
			] 
	].
	
	
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/13/2021 00:22:33' prior: 50335929!
removeCustomerNamed: aName
	self removeCustomerNamed: aName in: active with:[^aName].
	(suspended includes: aName) ifTrue:[
		^self removeCustomerNamed: aName in: suspended.	
	].
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/13/2021 00:23:14' prior: 50335966!
removeCustomerNamed: aName
	self removeCustomerNamed: aName in: active return:[^aName].
	self removeCustomerNamed: aName in: suspended return:[^aName].	
	^ NotFound signal.
! !
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/13/2021 00:23:20'!
removeCustomerNamed: aName in: aCustomerState return: aBlock
 
	1 to: aCustomerState size do: 
	[ :index | 
		aName = (aCustomerState at: index) 
			ifTrue: [
				aCustomerState removeAt: index.
				^aBlock.
			] 
	].
	
	
! !

!methodRemoval: CustomerBook #removeCustomerNamed:in:with: stamp: 'MG 10/13/2021 00:23:22'!
removeCustomerNamed: aName in: aCustomerState with: aBlock
 
	1 to: aCustomerState size do: 
	[ :index | 
		aName = (aCustomerState at: index) 
			ifTrue: [
				aCustomerState removeAt: index.
				^aBlock.
			] 
	].
	
	
!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/13/2021 00:23:47'!
ERROR!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/13/2021 00:23:47'!
ERROR!
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/13/2021 00:27:21' prior: 50335976!
removeCustomerNamed: aName
	self removeCustomerNamed: aName in: active.
	self removeCustomerNamed: aName in: suspended .	
	^ NotFound signal.
! !

!methodRemoval: CustomerBook #removeCustomerNamed:in:return: stamp: 'MG 10/13/2021 00:27:24'!
removeCustomerNamed: aName in: aCustomerState return: aBlock
 
	1 to: aCustomerState size do: 
	[ :index | 
		aName = (aCustomerState at: index) 
			ifTrue: [
				aCustomerState removeAt: index.
				^aBlock.
			] 
	].
	
	
!
!CustomerBook methodsFor: 'customer management' stamp: 'MG 10/13/2021 00:30:23' prior: 50336013!
removeCustomerNamed: aName
	
	(active includes: aName) ifTrue: [
	 	^self removeCustomerNamed: aName in: active.
	].
	 (suspended includes: aName) ifTrue: [
		^self removeCustomerNamed: aName in: suspended .	
	]. 
	
	^ NotFound signal.
! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:32:52'!
canNotDo: aBlock with: aCustomerBook onError: typeOfError 

	[ aBlock value.
	self fail ]
		on: typeOfError
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = 1.
			self assert: (aCustomerBook includesCustomerNamed: John) ]! !

!methodRemoval: CustomerBookTest #canNotDo:with:onThisError: stamp: 'MG 10/13/2021 00:32:57'!
canNotDo: aBlock with: aCustomerBook onThisError: typeOfError 

	[ aBlock value.
	self fail ]
		on: typeOfError
		do: [ :anError | 
			self assert: aCustomerBook numberOfCustomers = 1.
			self assert: (aCustomerBook includesCustomerNamed: John) ]!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:33:13' prior: 50334836!
testModifiedWith: anAction shouldNotTakeMoreThan: milliseconds
	
	|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	
	anAction value. 
	
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:34:21'!
test0506: block
	| customerBook  |
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: Paul.
	block value: customerBook value: Paul.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: Paul).! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:35:08' prior: 50336079!
test0506: aCustomerBook
	
	self assert: 0 equals: aCustomerBook numberOfActiveCustomers.
	self assert: 1 equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: 1 equals: aCustomerBook numberOfCustomers.
	self assert: (aCustomerBook includesCustomerNamed: Paul).! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:35:23' prior: 50334656!
test05Pruebas
	| customerBook  |
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: Paul.
	! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:35:58' prior: 50336107!
test05Pruebas
	| customerBook  |
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: Paul.
	customerBook suspendCustomerNamed: Paul.
	! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:36:24' prior: 50334686!
test06Pruebas
	| aCustomerBook  |
	aCustomerBook := CustomerBook new.

	aCustomerBook addCustomerNamed: Paul.
	aCustomerBook suspendCustomerNamed: Paul.
	aCustomerBook removeCustomerNamed: Paul.
	! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:36:33' prior: 50336114!
test05Pruebas
	| aCustomerBook  |
	aCustomerBook := CustomerBook new.

	aCustomerBook addCustomerNamed: Paul.
	aCustomerBook suspendCustomerNamed: Paul.
	! !

!methodRemoval: CustomerBookTest #test0506:xxx: stamp: 'MG 10/13/2021 00:36:42'!
test0506: block xxx: array
	| customerBook  |
	customerBook := CustomerBook new.

	customerBook addCustomerNamed: Paul.
	block value: customerBook value: Paul.
	
	self assert: (array at: 1) equals: customerBook numberOfActiveCustomers.
	self assert: (array at: 2) equals: customerBook numberOfSuspendedCustomers.
	self assert: (array at: 3) equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: Paul).!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:37:34'!
test0506: aCustomerBook xxx: numberOfSuspended
	
	self assert: 0 equals: aCustomerBook numberOfActiveCustomers.
	self assert: 1 equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: 1 equals: aCustomerBook numberOfCustomers.
	self assert: (aCustomerBook includesCustomerNamed: Paul).! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:37:41' prior: 50336156!
test0506: aCustomerBook xxx: numberOfSuspended
	
	self assert: 0 equals: aCustomerBook numberOfActiveCustomers.
	self assert: numberOfSuspended equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: numberOfSuspended equals: aCustomerBook numberOfCustomers.
	self assert: (aCustomerBook includesCustomerNamed: Paul).! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:38:57' prior: 50336169!
test0506: aCustomerBook xxx: numberOfSuspended
	
	self assert: 0 equals: aCustomerBook numberOfActiveCustomers.
	self assert: numberOfSuspended equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: numberOfSuspended equals: aCustomerBook numberOfCustomers.
	(numberOfSuspended > 0) ifTrue:[
		self assert: (aCustomerBook includesCustomerNamed: Paul).
	]ifFalse:[
		self deny: (aCustomerBook includesCustomerNamed: Paul).
	]
	! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:39:37' prior: 50336122!
test06Pruebas
	| aCustomerBook  |
	aCustomerBook := CustomerBook new.

	aCustomerBook addCustomerNamed: Paul.
	aCustomerBook suspendCustomerNamed: Paul.
	aCustomerBook removeCustomerNamed: Paul.
	
	self test0506: aCustomerBook xxx: 0. ! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:39:52' prior: 50336132!
test05Pruebas
	| aCustomerBook  |
	aCustomerBook := CustomerBook new.

	aCustomerBook addCustomerNamed: Paul.
	aCustomerBook suspendCustomerNamed: Paul.
	
	self test0506: aCustomerBook xxx: 1.! !

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/13/2021 00:39:54'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/13/2021 00:39:56'!
PASSED!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:42:15'!
ModifiedWith: anAction shouldNotTakeMoreThan: milliseconds
	
	|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	
	anAction value. 
	
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !

!methodRemoval: CustomerBookTest #testModifiedWith:shouldNotTakeMoreThan: stamp: 'MG 10/13/2021 00:42:19'!
testModifiedWith: anAction shouldNotTakeMoreThan: milliseconds
	
	|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	
	anAction value. 
	
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:42:26' prior: 50335822!
test01PruebasOK
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self ModifiedWith: [ aCustomerBook addCustomerNamed: Paul]  shouldNotTakeMoreThan: 50.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:42:30' prior: 50335830!
test02PruebasOK
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: Paul.
	self ModifiedWith: [aCustomerBook removeCustomerNamed: Paul]  shouldNotTakeMoreThan: 100.! !
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:42:50'!
modifiedWith: anAction shouldNotTakeMoreThan: milliseconds
	
	|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	
	anAction value. 
	
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)! !

!methodRemoval: CustomerBookTest #ModifiedWith:shouldNotTakeMoreThan: stamp: 'MG 10/13/2021 00:42:54'!
ModifiedWith: anAction shouldNotTakeMoreThan: milliseconds
	
	|millisecondsBeforeRunning millisecondsAfterRunning |
	
	millisecondsBeforeRunning := Time millisecondClockValue * millisecond.
	
	anAction value. 
	
	millisecondsAfterRunning := Time millisecondClockValue * millisecond.
	
	self assert: (millisecondsAfterRunning-millisecondsBeforeRunning) < (milliseconds * millisecond)!

!testRun: #CustomerBookTest #test07PruebasOK stamp: 'MG 10/13/2021 00:43:03'!
ERROR!

!testRun: #CustomerBookTest #test07PruebasOK stamp: 'MG 10/13/2021 00:43:03'!
ERROR!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:43:20' prior: 50336265!
test02PruebasOK
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: Paul.
	self modifiedWith: [aCustomerBook removeCustomerNamed: Paul]  shouldNotTakeMoreThan: 100.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:43:27' prior: 50336257!
test01PruebasOK
	|aCustomerBook|
	aCustomerBook := CustomerBook new.
	self modifiedWith: [ aCustomerBook addCustomerNamed: Paul]  shouldNotTakeMoreThan: 50.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:44:02' prior: 50335856!
test07PruebasOK
	
	| aCustomerBook |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: Ringo.] with: aCustomerBook onError: CantSuspend.! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:44:07' prior: 50335876!
test08PruebasOK
	| aCustomerBook |
			
	aCustomerBook := CustomerBook new.
	aCustomerBook addCustomerNamed: John.
	aCustomerBook suspendCustomerNamed: John.
	
	self canNotDo:  [ aCustomerBook suspendCustomerNamed: John.] with: aCustomerBook onError: CantSuspend.! !

!testRun: #CustomerBookTest #test01PruebasOK stamp: 'MG 10/13/2021 00:44:17'!
PASSED!

!testRun: #CustomerBookTest #test02PruebasOK stamp: 'MG 10/13/2021 00:44:17'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/13/2021 00:44:17'!
PASSED!

!testRun: #CustomerBookTest #test04PruebasOK stamp: 'MG 10/13/2021 00:44:17'!
ERROR!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/13/2021 00:44:17'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/13/2021 00:44:17'!
PASSED!

!testRun: #CustomerBookTest #test07PruebasOK stamp: 'MG 10/13/2021 00:44:17'!
PASSED!

!testRun: #CustomerBookTest #test08PruebasOK stamp: 'MG 10/13/2021 00:44:17'!
PASSED!

!testRun: #CustomerBookTest #test04PruebasOK stamp: 'MG 10/13/2021 00:44:17'!
ERROR!

!testRun: #CustomerBookTest #test01PruebasOK stamp: 'MG 10/13/2021 00:44:23'!
PASSED!

!testRun: #CustomerBookTest #test02PruebasOK stamp: 'MG 10/13/2021 00:44:25'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/13/2021 00:44:27'!
PASSED!

!testRun: #CustomerBookTest #test04PruebasOK stamp: 'MG 10/13/2021 00:44:29'!
ERROR!

!testRun: #CustomerBookTest #test04PruebasOK stamp: 'MG 10/13/2021 00:44:29'!
ERROR!
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:44:35' prior: 50335909!
test04PruebasOK
		
	| customerBook  |
			
	customerBook := CustomerBook new.
	customerBook addCustomerNamed: John.
	
	self canNotDo: [ customerBook removeCustomerNamed: Paul] with: customerBook onError: NotFound.! !

!testRun: #CustomerBookTest #test01PruebasOK stamp: 'MG 10/13/2021 00:44:38'!
PASSED!

!testRun: #CustomerBookTest #test02PruebasOK stamp: 'MG 10/13/2021 00:44:38'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/13/2021 00:44:38'!
PASSED!

!testRun: #CustomerBookTest #test04PruebasOK stamp: 'MG 10/13/2021 00:44:38'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/13/2021 00:44:38'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/13/2021 00:44:38'!
PASSED!

!testRun: #CustomerBookTest #test07PruebasOK stamp: 'MG 10/13/2021 00:44:38'!
PASSED!

!testRun: #CustomerBookTest #test08PruebasOK stamp: 'MG 10/13/2021 00:44:38'!
PASSED!
!CustomerBookTest methodsFor: 'testsSinCodigoRepetido' stamp: 'MG 10/13/2021 00:45:40' prior: 50336183!
test0506: aCustomerBook xxx: numberOfSuspended
	
	self assert: 0 equals: aCustomerBook numberOfActiveCustomers.
	self assert: numberOfSuspended equals: aCustomerBook numberOfSuspendedCustomers.
	self assert: numberOfSuspended equals: aCustomerBook numberOfCustomers.
	(numberOfSuspended = 1) ifTrue:[
		self assert: (aCustomerBook includesCustomerNamed: Paul).
	]ifFalse:[
		self deny: (aCustomerBook includesCustomerNamed: Paul).
	]
	! !
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/13/2021 00:46:21' prior: 50334459!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	"self assert: 0 equals: customerBook numberOfActiveCustomers."
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test01PruebasOK stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test02PruebasOK stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test03Pruebas stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test04PruebasOK stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test05Pruebas stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test06Pruebas stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test07PruebasOK stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'MG 10/13/2021 00:46:31'!
PASSED!

!testRun: #CustomerBookTest #test08PruebasOK stamp: 'MG 10/13/2021 00:46:31'!
PASSED!
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/13/2021 00:46:45' prior: 50336437!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	"self assert: 1 equals: customerBook numberOfSuspendedCustomers."
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'MG 10/13/2021 00:46:49'!
PASSED!
!CustomerBookTest methodsFor: 'tests' stamp: 'MG 10/13/2021 00:46:59' prior: 50336512!
test05SuspendingACustomerShouldNotRemoveItFromCustomerBook

	| customerBook paulMcCartney|
	
	customerBook := CustomerBook new.
	paulMcCartney := 'Paul McCartney'.
	
	customerBook addCustomerNamed: paulMcCartney.
	customerBook suspendCustomerNamed: paulMcCartney.
	
	self assert: 0 equals: customerBook numberOfActiveCustomers.
	self assert: 1 equals: customerBook numberOfSuspendedCustomers.
	self assert: 1 equals: customerBook numberOfCustomers.
	self assert: (customerBook includesCustomerNamed: paulMcCartney).
	

	
! !
!CustomerBookTest methodsFor: 'Pruebas' stamp: 'MG 10/13/2021 00:48:12'!
test03PruebasOK! !

!methodRemoval: CustomerBookTest #test03Pruebas stamp: 'MG 10/13/2021 00:48:14'!
test03Pruebas!

----QUIT----(13 October 2021 00:48:34) Ejercicio2.image priorSource: 103370!